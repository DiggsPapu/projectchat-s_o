// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_project_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_project_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_project_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_project_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_project_2eproto;
namespace chat {
class AllConnectedUsers;
class AllConnectedUsersDefaultTypeInternal;
extern AllConnectedUsersDefaultTypeInternal _AllConnectedUsers_default_instance_;
class ChangeStatus;
class ChangeStatusDefaultTypeInternal;
extern ChangeStatusDefaultTypeInternal _ChangeStatus_default_instance_;
class ServerResponse;
class ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserInfoRequest;
class UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserRegister;
class UserRegisterDefaultTypeInternal;
extern UserRegisterDefaultTypeInternal _UserRegister_default_instance_;
class UserRequest;
class UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class newMessage;
class newMessageDefaultTypeInternal;
extern newMessageDefaultTypeInternal _newMessage_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::AllConnectedUsers* Arena::CreateMaybeMessage<::chat::AllConnectedUsers>(Arena*);
template<> ::chat::ChangeStatus* Arena::CreateMaybeMessage<::chat::ChangeStatus>(Arena*);
template<> ::chat::ServerResponse* Arena::CreateMaybeMessage<::chat::ServerResponse>(Arena*);
template<> ::chat::UserInfo* Arena::CreateMaybeMessage<::chat::UserInfo>(Arena*);
template<> ::chat::UserInfoRequest* Arena::CreateMaybeMessage<::chat::UserInfoRequest>(Arena*);
template<> ::chat::UserRegister* Arena::CreateMaybeMessage<::chat::UserRegister>(Arena*);
template<> ::chat::UserRequest* Arena::CreateMaybeMessage<::chat::UserRequest>(Arena*);
template<> ::chat::newMessage* Arena::CreateMaybeMessage<::chat::newMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

// ===================================================================

class newMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.newMessage) */ {
 public:
  newMessage();
  virtual ~newMessage();

  newMessage(const newMessage& from);
  newMessage(newMessage&& from) noexcept
    : newMessage() {
    *this = ::std::move(from);
  }

  inline newMessage& operator=(const newMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline newMessage& operator=(newMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const newMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const newMessage* internal_default_instance() {
    return reinterpret_cast<const newMessage*>(
               &_newMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(newMessage& a, newMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(newMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline newMessage* New() const final {
    return CreateMaybeMessage<newMessage>(nullptr);
  }

  newMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<newMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const newMessage& from);
  void MergeFrom(const newMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(newMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.newMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 2,
    kRecipientFieldNumber = 3,
    kMessageFieldNumber = 4,
    kMessageTypeFieldNumber = 1,
  };
  // string sender = 2;
  void clear_sender();
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string recipient = 3;
  void clear_recipient();
  const std::string& recipient() const;
  void set_recipient(const std::string& value);
  void set_recipient(std::string&& value);
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  std::string* mutable_recipient();
  std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);
  private:
  const std::string& _internal_recipient() const;
  void _internal_set_recipient(const std::string& value);
  std::string* _internal_mutable_recipient();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool message_type = 1;
  void clear_message_type();
  bool message_type() const;
  void set_message_type(bool value);
  private:
  bool _internal_message_type() const;
  void _internal_set_message_type(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chat.newMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserRegister) */ {
 public:
  UserRegister();
  virtual ~UserRegister();

  UserRegister(const UserRegister& from);
  UserRegister(UserRegister&& from) noexcept
    : UserRegister() {
    *this = ::std::move(from);
  }

  inline UserRegister& operator=(const UserRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegister& operator=(UserRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegister* internal_default_instance() {
    return reinterpret_cast<const UserRegister*>(
               &_UserRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRegister& a, UserRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegister* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRegister* New() const final {
    return CreateMaybeMessage<UserRegister>(nullptr);
  }

  UserRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRegister& from);
  void MergeFrom(const UserRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.UserRegister)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserInfoRequest) */ {
 public:
  UserInfoRequest();
  virtual ~UserInfoRequest();

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoRequest* New() const final {
    return CreateMaybeMessage<UserInfoRequest>(nullptr);
  }

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoRequest& from);
  void MergeFrom(const UserInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kTypeRequestFieldNumber = 1,
  };
  // string user = 2;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // bool type_request = 1;
  void clear_type_request();
  bool type_request() const;
  void set_type_request(bool value);
  private:
  bool _internal_type_request() const;
  void _internal_set_type_request(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chat.UserInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  bool type_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class ChangeStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChangeStatus) */ {
 public:
  ChangeStatus();
  virtual ~ChangeStatus();

  ChangeStatus(const ChangeStatus& from);
  ChangeStatus(ChangeStatus&& from) noexcept
    : ChangeStatus() {
    *this = ::std::move(from);
  }

  inline ChangeStatus& operator=(const ChangeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeStatus& operator=(ChangeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeStatus* internal_default_instance() {
    return reinterpret_cast<const ChangeStatus*>(
               &_ChangeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChangeStatus& a, ChangeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeStatus* New() const final {
    return CreateMaybeMessage<ChangeStatus>(nullptr);
  }

  ChangeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeStatus& from);
  void MergeFrom(const ChangeStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChangeStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kNewStatusFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 newStatus = 2;
  void clear_newstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 newstatus() const;
  void set_newstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newstatus() const;
  void _internal_set_newstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ChangeStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int32 newstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserRequest) */ {
 public:
  UserRequest();
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRequest* New() const final {
    return CreateMaybeMessage<UserRequest>(nullptr);
  }

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewUserFieldNumber = 2,
    kInfoRequestFieldNumber = 3,
    kStatusFieldNumber = 4,
    kMessageFieldNumber = 5,
    kOptionFieldNumber = 1,
  };
  // .chat.UserRegister newUser = 2;
  bool has_newuser() const;
  private:
  bool _internal_has_newuser() const;
  public:
  void clear_newuser();
  const ::chat::UserRegister& newuser() const;
  ::chat::UserRegister* release_newuser();
  ::chat::UserRegister* mutable_newuser();
  void set_allocated_newuser(::chat::UserRegister* newuser);
  private:
  const ::chat::UserRegister& _internal_newuser() const;
  ::chat::UserRegister* _internal_mutable_newuser();
  public:

  // .chat.UserInfoRequest infoRequest = 3;
  bool has_inforequest() const;
  private:
  bool _internal_has_inforequest() const;
  public:
  void clear_inforequest();
  const ::chat::UserInfoRequest& inforequest() const;
  ::chat::UserInfoRequest* release_inforequest();
  ::chat::UserInfoRequest* mutable_inforequest();
  void set_allocated_inforequest(::chat::UserInfoRequest* inforequest);
  private:
  const ::chat::UserInfoRequest& _internal_inforequest() const;
  ::chat::UserInfoRequest* _internal_mutable_inforequest();
  public:

  // .chat.ChangeStatus status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::chat::ChangeStatus& status() const;
  ::chat::ChangeStatus* release_status();
  ::chat::ChangeStatus* mutable_status();
  void set_allocated_status(::chat::ChangeStatus* status);
  private:
  const ::chat::ChangeStatus& _internal_status() const;
  ::chat::ChangeStatus* _internal_mutable_status();
  public:

  // .chat.newMessage message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::chat::newMessage& message() const;
  ::chat::newMessage* release_message();
  ::chat::newMessage* mutable_message();
  void set_allocated_message(::chat::newMessage* message);
  private:
  const ::chat::newMessage& _internal_message() const;
  ::chat::newMessage* _internal_mutable_message();
  public:

  // int32 option = 1;
  void clear_option();
  ::PROTOBUF_NAMESPACE_ID::int32 option() const;
  void set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_option() const;
  void _internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.UserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::chat::UserRegister* newuser_;
  ::chat::UserInfoRequest* inforequest_;
  ::chat::ChangeStatus* status_;
  ::chat::newMessage* message_;
  ::PROTOBUF_NAMESPACE_ID::int32 option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.UserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class AllConnectedUsers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.AllConnectedUsers) */ {
 public:
  AllConnectedUsers();
  virtual ~AllConnectedUsers();

  AllConnectedUsers(const AllConnectedUsers& from);
  AllConnectedUsers(AllConnectedUsers&& from) noexcept
    : AllConnectedUsers() {
    *this = ::std::move(from);
  }

  inline AllConnectedUsers& operator=(const AllConnectedUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllConnectedUsers& operator=(AllConnectedUsers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllConnectedUsers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllConnectedUsers* internal_default_instance() {
    return reinterpret_cast<const AllConnectedUsers*>(
               &_AllConnectedUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AllConnectedUsers& a, AllConnectedUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(AllConnectedUsers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllConnectedUsers* New() const final {
    return CreateMaybeMessage<AllConnectedUsers>(nullptr);
  }

  AllConnectedUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllConnectedUsers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllConnectedUsers& from);
  void MergeFrom(const AllConnectedUsers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllConnectedUsers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.AllConnectedUsers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedUsersFieldNumber = 1,
  };
  // repeated .chat.UserInfo connectedUsers = 1;
  int connectedusers_size() const;
  private:
  int _internal_connectedusers_size() const;
  public:
  void clear_connectedusers();
  ::chat::UserInfo* mutable_connectedusers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo >*
      mutable_connectedusers();
  private:
  const ::chat::UserInfo& _internal_connectedusers(int index) const;
  ::chat::UserInfo* _internal_add_connectedusers();
  public:
  const ::chat::UserInfo& connectedusers(int index) const;
  ::chat::UserInfo* add_connectedusers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo >&
      connectedusers() const;

  // @@protoc_insertion_point(class_scope:chat.AllConnectedUsers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo > connectedusers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class ServerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ServerResponse) */ {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const final {
    return CreateMaybeMessage<ServerResponse>(nullptr);
  }

  ServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ServerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerMessageFieldNumber = 3,
    kConnectedUsersFieldNumber = 4,
    kMessageFieldNumber = 5,
    kUserInfoResponseFieldNumber = 6,
    kChangeFieldNumber = 7,
    kOptionFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string serverMessage = 3;
  void clear_servermessage();
  const std::string& servermessage() const;
  void set_servermessage(const std::string& value);
  void set_servermessage(std::string&& value);
  void set_servermessage(const char* value);
  void set_servermessage(const char* value, size_t size);
  std::string* mutable_servermessage();
  std::string* release_servermessage();
  void set_allocated_servermessage(std::string* servermessage);
  private:
  const std::string& _internal_servermessage() const;
  void _internal_set_servermessage(const std::string& value);
  std::string* _internal_mutable_servermessage();
  public:

  // .chat.AllConnectedUsers connectedUsers = 4;
  bool has_connectedusers() const;
  private:
  bool _internal_has_connectedusers() const;
  public:
  void clear_connectedusers();
  const ::chat::AllConnectedUsers& connectedusers() const;
  ::chat::AllConnectedUsers* release_connectedusers();
  ::chat::AllConnectedUsers* mutable_connectedusers();
  void set_allocated_connectedusers(::chat::AllConnectedUsers* connectedusers);
  private:
  const ::chat::AllConnectedUsers& _internal_connectedusers() const;
  ::chat::AllConnectedUsers* _internal_mutable_connectedusers();
  public:

  // .chat.newMessage message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::chat::newMessage& message() const;
  ::chat::newMessage* release_message();
  ::chat::newMessage* mutable_message();
  void set_allocated_message(::chat::newMessage* message);
  private:
  const ::chat::newMessage& _internal_message() const;
  ::chat::newMessage* _internal_mutable_message();
  public:

  // .chat.UserInfo userInfoResponse = 6;
  bool has_userinforesponse() const;
  private:
  bool _internal_has_userinforesponse() const;
  public:
  void clear_userinforesponse();
  const ::chat::UserInfo& userinforesponse() const;
  ::chat::UserInfo* release_userinforesponse();
  ::chat::UserInfo* mutable_userinforesponse();
  void set_allocated_userinforesponse(::chat::UserInfo* userinforesponse);
  private:
  const ::chat::UserInfo& _internal_userinforesponse() const;
  ::chat::UserInfo* _internal_mutable_userinforesponse();
  public:

  // .chat.ChangeStatus change = 7;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::chat::ChangeStatus& change() const;
  ::chat::ChangeStatus* release_change();
  ::chat::ChangeStatus* mutable_change();
  void set_allocated_change(::chat::ChangeStatus* change);
  private:
  const ::chat::ChangeStatus& _internal_change() const;
  ::chat::ChangeStatus* _internal_mutable_change();
  public:

  // int32 option = 1;
  void clear_option();
  ::PROTOBUF_NAMESPACE_ID::int32 option() const;
  void set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_option() const;
  void _internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ServerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servermessage_;
  ::chat::AllConnectedUsers* connectedusers_;
  ::chat::newMessage* message_;
  ::chat::UserInfo* userinforesponse_;
  ::chat::ChangeStatus* change_;
  ::PROTOBUF_NAMESPACE_ID::int32 option_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// newMessage

// bool message_type = 1;
inline void newMessage::clear_message_type() {
  message_type_ = false;
}
inline bool newMessage::_internal_message_type() const {
  return message_type_;
}
inline bool newMessage::message_type() const {
  // @@protoc_insertion_point(field_get:chat.newMessage.message_type)
  return _internal_message_type();
}
inline void newMessage::_internal_set_message_type(bool value) {
  
  message_type_ = value;
}
inline void newMessage::set_message_type(bool value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:chat.newMessage.message_type)
}

// string sender = 2;
inline void newMessage::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& newMessage::sender() const {
  // @@protoc_insertion_point(field_get:chat.newMessage.sender)
  return _internal_sender();
}
inline void newMessage::set_sender(const std::string& value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:chat.newMessage.sender)
}
inline std::string* newMessage::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:chat.newMessage.sender)
  return _internal_mutable_sender();
}
inline const std::string& newMessage::_internal_sender() const {
  return sender_.GetNoArena();
}
inline void newMessage::_internal_set_sender(const std::string& value) {
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newMessage::set_sender(std::string&& value) {
  
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.newMessage.sender)
}
inline void newMessage::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.newMessage.sender)
}
inline void newMessage::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.newMessage.sender)
}
inline std::string* newMessage::_internal_mutable_sender() {
  
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newMessage::release_sender() {
  // @@protoc_insertion_point(field_release:chat.newMessage.sender)
  
  return sender_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newMessage::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:chat.newMessage.sender)
}

// string recipient = 3;
inline void newMessage::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& newMessage::recipient() const {
  // @@protoc_insertion_point(field_get:chat.newMessage.recipient)
  return _internal_recipient();
}
inline void newMessage::set_recipient(const std::string& value) {
  _internal_set_recipient(value);
  // @@protoc_insertion_point(field_set:chat.newMessage.recipient)
}
inline std::string* newMessage::mutable_recipient() {
  // @@protoc_insertion_point(field_mutable:chat.newMessage.recipient)
  return _internal_mutable_recipient();
}
inline const std::string& newMessage::_internal_recipient() const {
  return recipient_.GetNoArena();
}
inline void newMessage::_internal_set_recipient(const std::string& value) {
  
  recipient_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newMessage::set_recipient(std::string&& value) {
  
  recipient_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.newMessage.recipient)
}
inline void newMessage::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.newMessage.recipient)
}
inline void newMessage::set_recipient(const char* value, size_t size) {
  
  recipient_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.newMessage.recipient)
}
inline std::string* newMessage::_internal_mutable_recipient() {
  
  return recipient_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newMessage::release_recipient() {
  // @@protoc_insertion_point(field_release:chat.newMessage.recipient)
  
  return recipient_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newMessage::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:chat.newMessage.recipient)
}

// string message = 4;
inline void newMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& newMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.newMessage.message)
  return _internal_message();
}
inline void newMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.newMessage.message)
}
inline std::string* newMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.newMessage.message)
  return _internal_mutable_message();
}
inline const std::string& newMessage::_internal_message() const {
  return message_.GetNoArena();
}
inline void newMessage::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newMessage::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.newMessage.message)
}
inline void newMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.newMessage.message)
}
inline void newMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.newMessage.message)
}
inline std::string* newMessage::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.newMessage.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.newMessage.message)
}

// -------------------------------------------------------------------

// UserRegister

// string username = 1;
inline void UserRegister::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRegister::username() const {
  // @@protoc_insertion_point(field_get:chat.UserRegister.username)
  return _internal_username();
}
inline void UserRegister::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.UserRegister.username)
}
inline std::string* UserRegister::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.UserRegister.username)
  return _internal_mutable_username();
}
inline const std::string& UserRegister::_internal_username() const {
  return username_.GetNoArena();
}
inline void UserRegister::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRegister::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UserRegister.username)
}
inline void UserRegister::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserRegister.username)
}
inline void UserRegister::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserRegister.username)
}
inline std::string* UserRegister::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRegister::release_username() {
  // @@protoc_insertion_point(field_release:chat.UserRegister.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegister::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegister.username)
}

// string ip = 2;
inline void UserRegister::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRegister::ip() const {
  // @@protoc_insertion_point(field_get:chat.UserRegister.ip)
  return _internal_ip();
}
inline void UserRegister::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:chat.UserRegister.ip)
}
inline std::string* UserRegister::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.UserRegister.ip)
  return _internal_mutable_ip();
}
inline const std::string& UserRegister::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void UserRegister::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRegister::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UserRegister.ip)
}
inline void UserRegister::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserRegister.ip)
}
inline void UserRegister::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserRegister.ip)
}
inline std::string* UserRegister::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRegister::release_ip() {
  // @@protoc_insertion_point(field_release:chat.UserRegister.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegister::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegister.ip)
}

// -------------------------------------------------------------------

// UserInfoRequest

// bool type_request = 1;
inline void UserInfoRequest::clear_type_request() {
  type_request_ = false;
}
inline bool UserInfoRequest::_internal_type_request() const {
  return type_request_;
}
inline bool UserInfoRequest::type_request() const {
  // @@protoc_insertion_point(field_get:chat.UserInfoRequest.type_request)
  return _internal_type_request();
}
inline void UserInfoRequest::_internal_set_type_request(bool value) {
  
  type_request_ = value;
}
inline void UserInfoRequest::set_type_request(bool value) {
  _internal_set_type_request(value);
  // @@protoc_insertion_point(field_set:chat.UserInfoRequest.type_request)
}

// string user = 2;
inline void UserInfoRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfoRequest::user() const {
  // @@protoc_insertion_point(field_get:chat.UserInfoRequest.user)
  return _internal_user();
}
inline void UserInfoRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:chat.UserInfoRequest.user)
}
inline std::string* UserInfoRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:chat.UserInfoRequest.user)
  return _internal_mutable_user();
}
inline const std::string& UserInfoRequest::_internal_user() const {
  return user_.GetNoArena();
}
inline void UserInfoRequest::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInfoRequest::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UserInfoRequest.user)
}
inline void UserInfoRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserInfoRequest.user)
}
inline void UserInfoRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserInfoRequest.user)
}
inline std::string* UserInfoRequest::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfoRequest::release_user() {
  // @@protoc_insertion_point(field_release:chat.UserInfoRequest.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfoRequest.user)
}

// -------------------------------------------------------------------

// ChangeStatus

// string username = 1;
inline void ChangeStatus::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChangeStatus::username() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.username)
  return _internal_username();
}
inline void ChangeStatus::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.username)
}
inline std::string* ChangeStatus::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatus.username)
  return _internal_mutable_username();
}
inline const std::string& ChangeStatus::_internal_username() const {
  return username_.GetNoArena();
}
inline void ChangeStatus::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChangeStatus::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ChangeStatus.username)
}
inline void ChangeStatus::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChangeStatus.username)
}
inline void ChangeStatus::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChangeStatus.username)
}
inline std::string* ChangeStatus::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChangeStatus::release_username() {
  // @@protoc_insertion_point(field_release:chat.ChangeStatus.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeStatus::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatus.username)
}

// int32 newStatus = 2;
inline void ChangeStatus::clear_newstatus() {
  newstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeStatus::_internal_newstatus() const {
  return newstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeStatus::newstatus() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.newStatus)
  return _internal_newstatus();
}
inline void ChangeStatus::_internal_set_newstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  newstatus_ = value;
}
inline void ChangeStatus::set_newstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newstatus(value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.newStatus)
}

// -------------------------------------------------------------------

// UserRequest

// int32 option = 1;
inline void UserRequest::clear_option() {
  option_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRequest::_internal_option() const {
  return option_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRequest::option() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.option)
  return _internal_option();
}
inline void UserRequest::_internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  option_ = value;
}
inline void UserRequest::set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.UserRequest.option)
}

// .chat.UserRegister newUser = 2;
inline bool UserRequest::_internal_has_newuser() const {
  return this != internal_default_instance() && newuser_ != nullptr;
}
inline bool UserRequest::has_newuser() const {
  return _internal_has_newuser();
}
inline void UserRequest::clear_newuser() {
  if (GetArenaNoVirtual() == nullptr && newuser_ != nullptr) {
    delete newuser_;
  }
  newuser_ = nullptr;
}
inline const ::chat::UserRegister& UserRequest::_internal_newuser() const {
  const ::chat::UserRegister* p = newuser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::UserRegister*>(
      &::chat::_UserRegister_default_instance_);
}
inline const ::chat::UserRegister& UserRequest::newuser() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.newUser)
  return _internal_newuser();
}
inline ::chat::UserRegister* UserRequest::release_newuser() {
  // @@protoc_insertion_point(field_release:chat.UserRequest.newUser)
  
  ::chat::UserRegister* temp = newuser_;
  newuser_ = nullptr;
  return temp;
}
inline ::chat::UserRegister* UserRequest::_internal_mutable_newuser() {
  
  if (newuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UserRegister>(GetArenaNoVirtual());
    newuser_ = p;
  }
  return newuser_;
}
inline ::chat::UserRegister* UserRequest::mutable_newuser() {
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.newUser)
  return _internal_mutable_newuser();
}
inline void UserRequest::set_allocated_newuser(::chat::UserRegister* newuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete newuser_;
  }
  if (newuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newuser, submessage_arena);
    }
    
  } else {
    
  }
  newuser_ = newuser;
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.newUser)
}

// .chat.UserInfoRequest infoRequest = 3;
inline bool UserRequest::_internal_has_inforequest() const {
  return this != internal_default_instance() && inforequest_ != nullptr;
}
inline bool UserRequest::has_inforequest() const {
  return _internal_has_inforequest();
}
inline void UserRequest::clear_inforequest() {
  if (GetArenaNoVirtual() == nullptr && inforequest_ != nullptr) {
    delete inforequest_;
  }
  inforequest_ = nullptr;
}
inline const ::chat::UserInfoRequest& UserRequest::_internal_inforequest() const {
  const ::chat::UserInfoRequest* p = inforequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::UserInfoRequest*>(
      &::chat::_UserInfoRequest_default_instance_);
}
inline const ::chat::UserInfoRequest& UserRequest::inforequest() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.infoRequest)
  return _internal_inforequest();
}
inline ::chat::UserInfoRequest* UserRequest::release_inforequest() {
  // @@protoc_insertion_point(field_release:chat.UserRequest.infoRequest)
  
  ::chat::UserInfoRequest* temp = inforequest_;
  inforequest_ = nullptr;
  return temp;
}
inline ::chat::UserInfoRequest* UserRequest::_internal_mutable_inforequest() {
  
  if (inforequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UserInfoRequest>(GetArenaNoVirtual());
    inforequest_ = p;
  }
  return inforequest_;
}
inline ::chat::UserInfoRequest* UserRequest::mutable_inforequest() {
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.infoRequest)
  return _internal_mutable_inforequest();
}
inline void UserRequest::set_allocated_inforequest(::chat::UserInfoRequest* inforequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inforequest_;
  }
  if (inforequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inforequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inforequest, submessage_arena);
    }
    
  } else {
    
  }
  inforequest_ = inforequest;
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.infoRequest)
}

// .chat.ChangeStatus status = 4;
inline bool UserRequest::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UserRequest::has_status() const {
  return _internal_has_status();
}
inline void UserRequest::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::chat::ChangeStatus& UserRequest::_internal_status() const {
  const ::chat::ChangeStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::ChangeStatus*>(
      &::chat::_ChangeStatus_default_instance_);
}
inline const ::chat::ChangeStatus& UserRequest::status() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.status)
  return _internal_status();
}
inline ::chat::ChangeStatus* UserRequest::release_status() {
  // @@protoc_insertion_point(field_release:chat.UserRequest.status)
  
  ::chat::ChangeStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatus* UserRequest::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ChangeStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::chat::ChangeStatus* UserRequest::mutable_status() {
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.status)
  return _internal_mutable_status();
}
inline void UserRequest::set_allocated_status(::chat::ChangeStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.status)
}

// .chat.newMessage message = 5;
inline bool UserRequest::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool UserRequest::has_message() const {
  return _internal_has_message();
}
inline void UserRequest::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::chat::newMessage& UserRequest::_internal_message() const {
  const ::chat::newMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::newMessage*>(
      &::chat::_newMessage_default_instance_);
}
inline const ::chat::newMessage& UserRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.message)
  return _internal_message();
}
inline ::chat::newMessage* UserRequest::release_message() {
  // @@protoc_insertion_point(field_release:chat.UserRequest.message)
  
  ::chat::newMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::chat::newMessage* UserRequest::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::newMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::chat::newMessage* UserRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.message)
  return _internal_mutable_message();
}
inline void UserRequest::set_allocated_message(::chat::newMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.message)
}

// -------------------------------------------------------------------

// UserInfo

// string username = 1;
inline void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.username)
  return _internal_username();
}
inline void UserInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.UserInfo.username)
}
inline std::string* UserInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.username)
  return _internal_mutable_username();
}
inline const std::string& UserInfo::_internal_username() const {
  return username_.GetNoArena();
}
inline void UserInfo::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInfo::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UserInfo.username)
}
inline void UserInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserInfo.username)
}
inline void UserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserInfo.username)
}
inline std::string* UserInfo::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:chat.UserInfo.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.username)
}

// string ip = 2;
inline void UserInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::ip() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.ip)
  return _internal_ip();
}
inline void UserInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:chat.UserInfo.ip)
}
inline std::string* UserInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& UserInfo::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void UserInfo::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInfo::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UserInfo.ip)
}
inline void UserInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserInfo.ip)
}
inline void UserInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserInfo.ip)
}
inline std::string* UserInfo::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_ip() {
  // @@protoc_insertion_point(field_release:chat.UserInfo.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.ip)
}

// int32 status = 3;
inline void UserInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::status() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.status)
  return _internal_status();
}
inline void UserInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void UserInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chat.UserInfo.status)
}

// -------------------------------------------------------------------

// AllConnectedUsers

// repeated .chat.UserInfo connectedUsers = 1;
inline int AllConnectedUsers::_internal_connectedusers_size() const {
  return connectedusers_.size();
}
inline int AllConnectedUsers::connectedusers_size() const {
  return _internal_connectedusers_size();
}
inline void AllConnectedUsers::clear_connectedusers() {
  connectedusers_.Clear();
}
inline ::chat::UserInfo* AllConnectedUsers::mutable_connectedusers(int index) {
  // @@protoc_insertion_point(field_mutable:chat.AllConnectedUsers.connectedUsers)
  return connectedusers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo >*
AllConnectedUsers::mutable_connectedusers() {
  // @@protoc_insertion_point(field_mutable_list:chat.AllConnectedUsers.connectedUsers)
  return &connectedusers_;
}
inline const ::chat::UserInfo& AllConnectedUsers::_internal_connectedusers(int index) const {
  return connectedusers_.Get(index);
}
inline const ::chat::UserInfo& AllConnectedUsers::connectedusers(int index) const {
  // @@protoc_insertion_point(field_get:chat.AllConnectedUsers.connectedUsers)
  return _internal_connectedusers(index);
}
inline ::chat::UserInfo* AllConnectedUsers::_internal_add_connectedusers() {
  return connectedusers_.Add();
}
inline ::chat::UserInfo* AllConnectedUsers::add_connectedusers() {
  // @@protoc_insertion_point(field_add:chat.AllConnectedUsers.connectedUsers)
  return _internal_add_connectedusers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo >&
AllConnectedUsers::connectedusers() const {
  // @@protoc_insertion_point(field_list:chat.AllConnectedUsers.connectedUsers)
  return connectedusers_;
}

// -------------------------------------------------------------------

// ServerResponse

// int32 option = 1;
inline void ServerResponse::clear_option() {
  option_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponse::_internal_option() const {
  return option_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponse::option() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.option)
  return _internal_option();
}
inline void ServerResponse::_internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  option_ = value;
}
inline void ServerResponse::set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.option)
}

// int32 code = 2;
inline void ServerResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponse::code() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.code)
  return _internal_code();
}
inline void ServerResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ServerResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.code)
}

// string serverMessage = 3;
inline void ServerResponse::clear_servermessage() {
  servermessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerResponse::servermessage() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.serverMessage)
  return _internal_servermessage();
}
inline void ServerResponse::set_servermessage(const std::string& value) {
  _internal_set_servermessage(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.serverMessage)
}
inline std::string* ServerResponse::mutable_servermessage() {
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.serverMessage)
  return _internal_mutable_servermessage();
}
inline const std::string& ServerResponse::_internal_servermessage() const {
  return servermessage_.GetNoArena();
}
inline void ServerResponse::_internal_set_servermessage(const std::string& value) {
  
  servermessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerResponse::set_servermessage(std::string&& value) {
  
  servermessage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ServerResponse.serverMessage)
}
inline void ServerResponse::set_servermessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servermessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ServerResponse.serverMessage)
}
inline void ServerResponse::set_servermessage(const char* value, size_t size) {
  
  servermessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ServerResponse.serverMessage)
}
inline std::string* ServerResponse::_internal_mutable_servermessage() {
  
  return servermessage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerResponse::release_servermessage() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.serverMessage)
  
  return servermessage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerResponse::set_allocated_servermessage(std::string* servermessage) {
  if (servermessage != nullptr) {
    
  } else {
    
  }
  servermessage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servermessage);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.serverMessage)
}

// .chat.AllConnectedUsers connectedUsers = 4;
inline bool ServerResponse::_internal_has_connectedusers() const {
  return this != internal_default_instance() && connectedusers_ != nullptr;
}
inline bool ServerResponse::has_connectedusers() const {
  return _internal_has_connectedusers();
}
inline void ServerResponse::clear_connectedusers() {
  if (GetArenaNoVirtual() == nullptr && connectedusers_ != nullptr) {
    delete connectedusers_;
  }
  connectedusers_ = nullptr;
}
inline const ::chat::AllConnectedUsers& ServerResponse::_internal_connectedusers() const {
  const ::chat::AllConnectedUsers* p = connectedusers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::AllConnectedUsers*>(
      &::chat::_AllConnectedUsers_default_instance_);
}
inline const ::chat::AllConnectedUsers& ServerResponse::connectedusers() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.connectedUsers)
  return _internal_connectedusers();
}
inline ::chat::AllConnectedUsers* ServerResponse::release_connectedusers() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.connectedUsers)
  
  ::chat::AllConnectedUsers* temp = connectedusers_;
  connectedusers_ = nullptr;
  return temp;
}
inline ::chat::AllConnectedUsers* ServerResponse::_internal_mutable_connectedusers() {
  
  if (connectedusers_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::AllConnectedUsers>(GetArenaNoVirtual());
    connectedusers_ = p;
  }
  return connectedusers_;
}
inline ::chat::AllConnectedUsers* ServerResponse::mutable_connectedusers() {
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.connectedUsers)
  return _internal_mutable_connectedusers();
}
inline void ServerResponse::set_allocated_connectedusers(::chat::AllConnectedUsers* connectedusers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connectedusers_;
  }
  if (connectedusers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connectedusers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connectedusers, submessage_arena);
    }
    
  } else {
    
  }
  connectedusers_ = connectedusers;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.connectedUsers)
}

// .chat.newMessage message = 5;
inline bool ServerResponse::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ServerResponse::has_message() const {
  return _internal_has_message();
}
inline void ServerResponse::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::chat::newMessage& ServerResponse::_internal_message() const {
  const ::chat::newMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::newMessage*>(
      &::chat::_newMessage_default_instance_);
}
inline const ::chat::newMessage& ServerResponse::message() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.message)
  return _internal_message();
}
inline ::chat::newMessage* ServerResponse::release_message() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.message)
  
  ::chat::newMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::chat::newMessage* ServerResponse::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::newMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::chat::newMessage* ServerResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.message)
  return _internal_mutable_message();
}
inline void ServerResponse::set_allocated_message(::chat::newMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.message)
}

// .chat.UserInfo userInfoResponse = 6;
inline bool ServerResponse::_internal_has_userinforesponse() const {
  return this != internal_default_instance() && userinforesponse_ != nullptr;
}
inline bool ServerResponse::has_userinforesponse() const {
  return _internal_has_userinforesponse();
}
inline void ServerResponse::clear_userinforesponse() {
  if (GetArenaNoVirtual() == nullptr && userinforesponse_ != nullptr) {
    delete userinforesponse_;
  }
  userinforesponse_ = nullptr;
}
inline const ::chat::UserInfo& ServerResponse::_internal_userinforesponse() const {
  const ::chat::UserInfo* p = userinforesponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::UserInfo*>(
      &::chat::_UserInfo_default_instance_);
}
inline const ::chat::UserInfo& ServerResponse::userinforesponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.userInfoResponse)
  return _internal_userinforesponse();
}
inline ::chat::UserInfo* ServerResponse::release_userinforesponse() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.userInfoResponse)
  
  ::chat::UserInfo* temp = userinforesponse_;
  userinforesponse_ = nullptr;
  return temp;
}
inline ::chat::UserInfo* ServerResponse::_internal_mutable_userinforesponse() {
  
  if (userinforesponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UserInfo>(GetArenaNoVirtual());
    userinforesponse_ = p;
  }
  return userinforesponse_;
}
inline ::chat::UserInfo* ServerResponse::mutable_userinforesponse() {
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.userInfoResponse)
  return _internal_mutable_userinforesponse();
}
inline void ServerResponse::set_allocated_userinforesponse(::chat::UserInfo* userinforesponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete userinforesponse_;
  }
  if (userinforesponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userinforesponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinforesponse, submessage_arena);
    }
    
  } else {
    
  }
  userinforesponse_ = userinforesponse;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.userInfoResponse)
}

// .chat.ChangeStatus change = 7;
inline bool ServerResponse::_internal_has_change() const {
  return this != internal_default_instance() && change_ != nullptr;
}
inline bool ServerResponse::has_change() const {
  return _internal_has_change();
}
inline void ServerResponse::clear_change() {
  if (GetArenaNoVirtual() == nullptr && change_ != nullptr) {
    delete change_;
  }
  change_ = nullptr;
}
inline const ::chat::ChangeStatus& ServerResponse::_internal_change() const {
  const ::chat::ChangeStatus* p = change_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::ChangeStatus*>(
      &::chat::_ChangeStatus_default_instance_);
}
inline const ::chat::ChangeStatus& ServerResponse::change() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.change)
  return _internal_change();
}
inline ::chat::ChangeStatus* ServerResponse::release_change() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.change)
  
  ::chat::ChangeStatus* temp = change_;
  change_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatus* ServerResponse::_internal_mutable_change() {
  
  if (change_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ChangeStatus>(GetArenaNoVirtual());
    change_ = p;
  }
  return change_;
}
inline ::chat::ChangeStatus* ServerResponse::mutable_change() {
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.change)
  return _internal_mutable_change();
}
inline void ServerResponse::set_allocated_change(::chat::ChangeStatus* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete change_;
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    
  } else {
    
  }
  change_ = change;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.change)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_project_2eproto
